/* ESTE ARCHIVO .SQL RECOPILA TODOS LOS COMANDOS PARA GENERAR LAS TABLAS, LOS ÍNDICES
 * Y EL PAQUETE CON FUNCIONES Y PROCEDIMIENTOS A UTILIZAR, PARA AGREGAR ELEMENTOS A LAS TABLAS, 
 * TEST DE LAS FUNCIONES Y DEMÁS, VER LA TOTALIDAD DE ARCHIVOS DISPONIBLES EN LA CARPETA DE DRIVE /*

-- Asignando cuota ilimitada sobre la tabla 

/* Estas dos lineas permiten que tanto el esquema de la tabla como el esquema del 
 * usuario SYS puedan realizar modificaciones sobre las tablas
 */

ALTER USER APP_DATOS_IMPRESION quota unlimited on USERS;

ALTER USER SYS quota unlimited on USERS;

-- Creando tabla estratos

CREATE TABLE APP_DATOS_IMPRESION.STRATUMS (
	ID INTEGER NOT NULL,
	COST_PER_CM FLOAT NOT NULL,
	BUSINESS_DAYS INTEGER NOT NULL,
	CONSTRAINT STRATUMS_PK PRIMARY KEY (ID)
);

-- Creando tabla clientes

CREATE TABLE APP_DATOS_IMPRESION.CLIENTS (
	ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	DOCUMENT INTEGER NOT NULL,
	NAME VARCHAR2(100) NOT NULL,
	ADDRESS VARCHAR2(100) NOT NULL,
	STRATUM_ID INTEGER NOT NULL,
	CONSTRAINT CLIENTS_PK PRIMARY KEY (ID),
	CONSTRAINT STRATUM_ID FOREIGN KEY (STRATUM_ID) REFERENCES APP_DATOS_IMPRESION.STRATUMS(ID)
);

-- Creando tabla periodos

CREATE TABLE APP_DATOS_IMPRESION.PERIODS (
	ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	MONTH_YEAR VARCHAR2(100) NOT NULL,
	CONSTRAINT PERIOD_PK PRIMARY KEY (ID)
);

-- Creando tabla consumos

CREATE TABLE APP_DATOS_IMPRESION.CONSUMPTIONS (
	ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	CUBIC_METERS FLOAT NOT NULL,
	CLIENT_ID INTEGER NOT NULL,
	PERIOD_ID INTEGER NOT NULL,
	CONSTRAINT CONSUMPTIONS_PK PRIMARY KEY (ID),
	CONSTRAINT FK_CLIENTS FOREIGN KEY (CLIENT_ID) REFERENCES APP_DATOS_IMPRESION.CLIENTS(ID),
	CONSTRAINT FK_PERIODS FOREIGN KEY (PERIOD_ID) REFERENCES APP_DATOS_IMPRESION.PERIODS(ID)
);

-- Creando tabla facturas

CREATE TABLE APP_DATOS_IMPRESION.BILLS (
	ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	PAYMENT_DUE DATE NOT NULL,
	AMOUNT FLOAT NOT NULL,
	DELIVERY_RATE FLOAT NOT NULL,
	CONSUMPTION_ID INTEGER NOT NULL,
	CONSTRAINT BILLS_PK PRIMARY KEY (ID),
	CONSTRAINT FK_CONSUMPTIONS FOREIGN KEY (CONSUMPTION_ID) REFERENCES APP_DATOS_IMPRESION.CONSUMPTIONS(ID)
);

-- Creando tabla que guarda inf sobre los archivos .CSV con el print spool

CREATE TABLE APP_DATOS_IMPRESION.PRINTSPOOLS (
	ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	PERIOD_ID INTEGER NOT NULL,
	FILENAME VARCHAR2(100) NOT NULL,
	CREATED VARCHAR2(100) NOT NULL,
	CODE VARCHAR2(100) NOT NULL,
	CONSTRAINT PRINTSPOOLS_PK PRIMARY KEY (ID),
	CONSTRAINT FK_PERIODS2 FOREIGN KEY (PERIOD_ID) REFERENCES APP_DATOS_IMPRESION.PERIODS(ID)
);

-- Creando tabla que guarda inf sobre los archivos subidos

CREATE TABLE APP_DATOS_IMPRESION.UPLOADS (
	ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	FILENAME VARCHAR2(100) NOT NULL,
	CREATED VARCHAR2(100) NOT NULL,
	CONSTRAINT UPLOADS_PK PRIMARY KEY (ID)
);

-- Index para estratos

CREATE INDEX STRATUMS_ID_IDX ON APP_DATOS_IMPRESION.STRATUMS (ID);

-- Index para clientes

CREATE INDEX CLIENTS_ID_IDX ON APP_DATOS_IMPRESION.CLIENTS (ID);

-- Index para periodos

/* Se elige el mes_año porque se necesita para seleccionar los consumos a facturar y es un índice que permite 
 * acceder de forma más rápida y óptima a estos a través de otras tablas usando joins */

CREATE INDEX PERIOD_MONTH_YEAR_IDX ON APP_DATOS_IMPRESION.PERIODS (MONTH_YEAR);

-- Index para consumos

CREATE INDEX CONSUMPTIONS_ID_IDX ON APP_DATOS_IMPRESION.CONSUMPTIONS (ID);

-- Index para facturas

CREATE INDEX BILLS_ID_IDX ON APP_DATOS_IMPRESION.BILLS (ID);

-- Creando index para la tabla de print spools generados 

CREATE INDEX PRINTSPOOLS_PERIOD_ID_IDX ON APP_DATOS_IMPRESION.PRINTSPOOLS (PERIOD_ID);

-- Creando index para la tabla de archivos subidos

CREATE INDEX UPLOADS_LINK_IDX ON APP_DATOS_IMPRESION.UPLOADS (LINK);

-- Creando paquete que agrupará funciones y procedimientos necesarios para gestionar el spool

-- Paquete agrupando procedimientos y funciones

CREATE OR REPLACE PACKAGE print_spool AS 
-- Función que calcula un rate de entrega de las facturas
   FUNCTION del_rate(address VARCHAR2) RETURN NUMBER;
-- Función que retorna el costo para cada factura
   FUNCTION cal_amount(cost_per_cm NUMBER, cubic_meters NUMBER) RETURN NUMBER;
-- Generación de la fecha de pago
   FUNCTION cal_due(begining VARCHAR2, time_lapse NUMBER) RETURN DATE;
-- Procedimiento que inserta los elementos en la tabla BILLS para generar el spool mensual
   PROCEDURE spool_gen (period VARCHAR2);
-- Función que genera el average de los últimos Z meses para el print spool
   FUNCTION cal_avg(id_client IN INT, Z IN INT) RETURN NUMBER;
-- Función que genera la lista de los Z últimos consumos
   FUNCTION get_last_Z(id_client IN INT, Z IN INT) RETURN VARCHAR2;
END print_spool;

CREATE OR REPLACE PACKAGE BODY print_spool AS

-- Función que calcula un rate básico de entrega de las facturas

/* Esta función calcula un número entre 1001 y 999999 para cada dirección, generando el mismo número para cada factura
 * ubicada entre una calle con una avenida dada, además el aumento de los números generados se da siguiendo una secuencia,
 * de tal manera que el delivery rate genera un órden de entrega contínuo. Existen dos restricciones para este algoritmo:
 * 1. Solo sirve para direcciones dadas por St XXX # XXX XX o Av XXX # XXX XX.
 * 2. Solo sirve para calles y avenidas con máximo 3 cifras, por lo que aplica para cualquier ciudad colombiana. */

FUNCTION del_rate(address VARCHAR2)  
RETURN number 
IS 	
	st NUMBER;
	av NUMBER;
	avV VARCHAR2(100);
    rate NUMBER;
BEGIN 
	IF REGEXP_SUBSTR(address, '[^ ]+', 1, 1) = 'St' THEN
		st := REGEXP_SUBSTR(address, '[^ ]+', 1, 2);
		av := REGEXP_SUBSTR(address, '[^ ]+', 1, 4);
	ELSE
		av := REGEXP_SUBSTR(address, '[^ ]+', 1, 2);
		st := REGEXP_SUBSTR(address, '[^ ]+', 1, 4);
	END IF;
	IF MOD(st, 2) = 0 THEN
		av := ABS(av-999);
	END IF;
	avV := TO_CHAR(av);
	IF LENGTH(avV) = 1 THEN
		st := st*100;
	ELSIF LENGTH(avV) = 2 THEN
		st := st*10;
	END IF;
	avV := CONCAT(TO_CHAR(st), avV);
	rate := TO_NUMBER(avV);
	RETURN rate;
END del_rate;

-- Función que retorna el costo para cada factura

/* Esta función recupera el costo por centímetro cúbico de cada estrato y los metros cúbicos de cada consumo y entrega
 * el resultado de la multiplicación entre estos 2 para agregarlo a la factura generada */

FUNCTION cal_amount(cost_per_cm NUMBER, cubic_meters NUMBER)  
RETURN number 
IS 
    amount number; 
BEGIN 
	amount := cost_per_cm * cubic_meters; 
	RETURN amount;
END cal_amount;

-- Generación de la fecha de pago

/* Esta función obtiene la fecha de facturación del consumo y le suma el tiempo para realizar el pago para el cliente 
 * de acuerdo a su estrato, agregando este dato a la factura generada */

FUNCTION cal_due(begining VARCHAR2, time_lapse NUMBER)  
RETURN DATE 
IS 
    ending DATE; 
BEGIN 
	ending := TO_DATE(begining, 'MM/YYYY')+time_lapse+(17/24); 
	RETURN ending;
END cal_due;

-- Procedimiento que inserta los elementos en la tabla BILLS para generar el spool mensual

/* Este procedimiento genera la facturación para un mes dado, se utiliza desde el Backend para la generación
 * periódica de las facturas y para la generación de la facturación hasta el día actual del mes en el que se solicite */

PROCEDURE spool_gen (period VARCHAR2) AS
BEGIN
	  INSERT INTO APP_DATOS_IMPRESION.BILLS b (PAYMENT_DUE, AMOUNT, DELIVERY_RATE, CONSUMPTION_ID) 
	SELECT print_spool.cal_due(p.MONTH_YEAR, s.BUSINESS_DAYS), 
		print_spool.cal_amount(s.COST_PER_CM, c2.CUBIC_METERS),
		print_spool.del_rate(c.ADDRESS),
		c2.ID
	FROM APP_DATOS_IMPRESION.PERIODS p
	INNER JOIN APP_DATOS_IMPRESION.CONSUMPTIONS c2
	ON c2.PERIOD_ID  = p.ID
	INNER JOIN APP_DATOS_IMPRESION.CLIENTS c 
	ON c2.CLIENT_ID  = c.ID 
	INNER JOIN APP_DATOS_IMPRESION.STRATUMS s 
	ON c.STRATUM_ID = s.ID
	WHERE p.MONTH_YEAR = period AND NOT EXISTS (
        SELECT
            CONSUMPTION_ID 
        FROM
            APP_DATOS_IMPRESION.BILLS b2 
        WHERE
            b2.CONSUMPTION_ID  = c2.ID 
    );
END spool_gen;

-- Función que genera el average de los últimos Z meses para el print spool

/* Esta función genera el consumo promedio de los X últimos meses para un cliente dado,
 * posteriormente lo envía al print spool*/

FUNCTION cal_avg(id_client IN INT, Z IN INT)  
	RETURN NUMBER    
	IS     
	x NUMBER;
	y NUMBER;
	BEGIN    
		BEGIN
		    WITH CTE AS
			(SELECT CUBIC_METERS FROM APP_DATOS_IMPRESION.CONSUMPTIONS 
			WHERE APP_DATOS_IMPRESION.CONSUMPTIONS.CLIENT_ID = id_client 
			ORDER BY APP_DATOS_IMPRESION.CONSUMPTIONS.PERIOD_ID DESC FETCH FIRST Z ROWS ONLY) 
			SELECT ROUND(AVG(CUBIC_METERS),2) 
		    INTO y
		    FROM CTE;
		END;
		x :=y;    
	RETURN x;    
	END cal_avg;

-- Función que genera la lista de los Z últimos consumos

/* Esta función toma los últimos X consumos y los devuelve en un string donde cada consumo está separado
 * del otro por una coma, de esta manera se pueden enviar al print spool de forma dinámica */

FUNCTION get_last_Z(id_client IN INT, Z IN INT) RETURN VARCHAR2
	   IS     
	x VARCHAR2(100);
	y VARCHAR2(100);
	BEGIN    
		BEGIN
		    WITH CTE AS
			(SELECT CUBIC_METERS FROM APP_DATOS_IMPRESION.CONSUMPTIONS 
			WHERE APP_DATOS_IMPRESION.CONSUMPTIONS.CLIENT_ID = id_client 
			ORDER BY APP_DATOS_IMPRESION.CONSUMPTIONS.PERIOD_ID DESC FETCH FIRST Z ROWS ONLY) 
			SELECT LISTAGG(CUBIC_METERS, ' ')
		    INTO y
		    FROM CTE;
		END;
		x :=y;    
	RETURN x;    
	END get_last_Z;

END print_spool;